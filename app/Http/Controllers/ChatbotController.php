<?php

namespace App\Http\Controllers;

use Gemini\Laravel\Facades\Gemini;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class ChatbotController extends Controller
{
    public function handleChat(Request $request)
    {
        // $userMessage = trim($request->input('message', ''));

        // Log::info('Chatbot called', ['message' => $userMessage]);

        // // ‚úÖ CHATBOT TH√îNG MINH KH√îNG D√ôNG API
        // $reply = $this->getSmartReply($userMessage);

        // return response()->json(['reply' => $reply]);

        // Validate input
        $request->validate([
            'message' => 'required|string',
        ]);

        $userMessage = $request->input('message');

        try {
            // G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini: d√πng model generativeModel theo doc v2.x :contentReference[oaicite:2]{index=2}
            $response = Gemini::generativeModel(model: 'gemini-2.0-flash')
                ->generateContent($userMessage);

            $replyText = $response->text() ?? 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n.';
        } catch (\Throwable $e) {
            // Log l·ªói n·∫øu c·∫ßn
            Log::error('Gemini chat error: ' . $e->getMessage());

            $replyText = 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }

        return response()->json([
            'reply' => $replyText,
        ]);
    }

    private function getSmartReply($message)
    {
        $message = strtolower($message);

        // Quy t·∫Øc tr·∫£ l·ªùi th√¥ng minh cho k√Ω t√∫c x√°
        if (strpos($message, 'ph√≤ng') !== false || strpos($message, 'room') !== false) {
            return "üìç **Ph√≤ng tr·ªëng hi·ªán t·∫°i:**
                ‚Ä¢ Ph√≤ng 101, 102: C√≤n ch·ªó (2.5tr/th√°ng)
                ‚Ä¢ Ph√≤ng 201: ƒê·∫ßy
                ‚Ä¢ Ph√≤ng 301: C√≤n 1 ch·ªó
                H·ªèi 'tra ph√≤ng 101' ƒë·ªÉ xem chi ti·∫øt!";
        }

        if (strpos($message, 'ti·ªÅn') !== false || strpos($message, 'thanh to√°n') !== false || strpos($message, 'h·ªçc ph√≠') !== false) {
            return "üí∞ **H·∫°n ƒë√≥ng ti·ªÅn:**
                ‚Ä¢ Th√°ng 10: 25/10/2025
                ‚Ä¢ C√°ch thanh to√°n: 
                1. Chuy·ªÉn kho·∫£n Vietcombank 123456789
                2. QR code t·∫°i qu·∫ßy l·ªÖ t√¢n
                Ghi r√µ: 'H·ªç t√™n + Ph√≤ng s·ªë'";
        }

        if (strpos($message, 's·ª≠a') !== false || strpos($message, 'h·ªèng') !== false || strpos($message, 'ƒëi·ªán') !== false) {
            return "üîß **B√°o s·ª≠a ch·ªØa:**
                1. G·ª≠i ·∫£nh + m√¥ t·∫£ v√†o ƒë√¢y
                2. Nh√¢n vi√™n s·∫Ω ƒë·∫øn trong 24h
                3. Hotline: 1900-xxx-xxx";
        }

        if (strpos($message, 'wifi') !== false) {
            return "üì∂ **WiFi k√Ω t√∫c x√°:**
                ‚Ä¢ T√™n: KTX_WiFi_2025
                ‚Ä¢ Pass: ktx2025@123
                ‚Ä¢ T·ªëc ƒë·ªô: 100Mbps
                Li√™n h·ªá admin n·∫øu y·∫øu!";
        }

        if (strpos($message, 'gi·ªù') !== false || strpos($message, 'c·ª≠a') !== false) {
            return "‚è∞ **Gi·ªù gi·∫•c:**
                ‚Ä¢ C·ª≠a ch√≠nh: 6h-22h
                ‚Ä¢ Sau 22h: C·ªïng ph·ª• (th·∫ª t·ª´)
                ‚Ä¢ Cu·ªëi tu·∫ßn: 24/7";
        }

        // Tr·∫£ l·ªùi chung
        $replies = [
            "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ ph√≤ng ·ªü, thanh to√°n, s·ª≠a ch·ªØa, wifi, gi·ªù gi·∫•c k√Ω t√∫c x√°!",
            "H·ªèi t√¥i: 'ph√≤ng tr·ªëng', 'ƒë√≥ng ti·ªÅn', 'b√°o s·ª≠a', 'wifi pass' nh√©!",
            "T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7! üòä",
            "B·∫°n c·∫ßn gi√∫p g√¨ v·ªÅ k√Ω t√∫c x√° ·∫°?"
        ];

        return $replies[array_rand($replies)];
    }
}
